#Arithmetic Expressions - numbers, operators, expressions

# 2 types of numbers: integers or decimals

# data types: int() and float()

print type(3), type(3.1456)
# prints: <type 'int'> < type 'float'>

#----------------
# convert between data types using int() and float()
# int takes whole part of a decimal

print int(3.14156), int(-2.8)
# prints: 3 -2

print float(3), float(-1)
# prints: 3.0 -1.0


#-----------------
# floating point numbers have around 15 decimal digits of accuracy


#-----------------
# arithmetic operators: +, -, *, /, ** exponentiation

print 1 + 2, 3 - 4, 5 * 6, 2 ** 5
# prints: 3 -1 30 32

#------------------------
# Division in Python 2

# if one operand is a decimal (float) the answer is a decimal

print 1.0 / 3, 5.0 / 2.0, -7 / 3.0
#prints: .33333333333 2.5 -2.333333333333

# if both operands are ints, the answer is an int rounded down

print 1 / 3, 5 / 12, -7 / 3
#prints: 0 2 -3


#-------------------------
# Expressions - number or a binary applied to 2 expressions
# minus is also a unary operator and can be applied to a single expression

print 1 + 2 * 3, 4.0 - 5.0 / 6.0, 7 * 8 + 9 * 10
#prints: 7 3.16666666 146

# operator precedence: "please excuse my dear aunt sallie"
# (), **, *, /, +, -

# always manually group usining parentheses when in doubt


# Compute the distance between the points (x0, y0) and (x1, y1).
(2,2) (5,6)

print ((2 - 5) ** 2 + (2 - 6) ** 2) ** 0.5


###################################################################
###################################################################

# Remainder - modular arithmetic

# systematically restrict computation to a range
# long division - divide by a number, we get a quotient plus a remainder

# quotient is integer division //, the remainder is %

# problem - get the ones digit of a number
num = 49

# integer division operator "//"
tens = num // 10
print tens
# prints: 4

# modulo operator "%"
ones = num % 10
print ones
# prints: 9

print tens, ones
print 10 * tens + ones, num


#---------------------------------


# application - 24 hour clock
# http://en.wikipedia.org/wiki/24-hour_clock

hour = 20
shift = 8
print (hour + shift) % 24


#----------------------------------

# application - screen wraparound

width = 800
position = 797
move = 5
position = (position + move) % width
print position


#----------------------------------


# Data conversion operations

# convert an integer into string - str
# convert an hour into 24-hour format "03:00", always print leading zero

hour = 3
ones = hour % 10
tens = hour // 10
print tens, ones, ":00"
print str(tens), str(ones), ":00"
print str(tens) + str(ones) + ":00"

